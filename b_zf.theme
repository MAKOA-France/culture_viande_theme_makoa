<?php

/**
 * @file
 * Preprocess functions for basic smv.
 */

use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Cache\CacheableMetadata;
use Drupal\taxonomy\Entity\Term;
use Drupal\media\Entity\Media;
use Drupal\file\Entity\File;

/* function getNodeFieldValue ($node, $field) {
  $value = '';
  $getValue = $node->get($field)->getValue();
  if (!empty($getValue)) {
    if (isset($getValue[0]['target_id'])) { //For entity reference (img / taxonomy ...)
      $value = $getValue[0]['target_id'];
    }elseif (isset($getValue[0]['value']))  { //For simple text / date
      $value = $getValue[0]['value'];
    }else if(isset($getValue[0]['uri'])) {
      $value = $getValue[0]['uri'];
    }else { //other type of field

    }
  }
  return $value;
} */

define('DEFAULT_ILLUSTRATION_IMG', 'public://2023-07/nutrition.jpg');
define('DEFAULT_ILLUSTRATION_IMG_SITE_PUB', '/files/2024-03/shutterstock_775933282%20%287%29_0.jpg');
define('SITE_PUBLIC_DOMAIN', 'https://cultureviande.makoa4.makoa.net/accueil-public');

/**
 * Prepares variables for the html.html.twig template.
 */
function b_zf_preprocess_html(&$variables) {
// Load the entity type manager service.
$entityTypeManager = \Drupal::entityTypeManager();
$current_route_match = \Drupal::routeMatch();

// Define the array of media IDs you want to load.
// $mediaIds = [29369, 29368, 29367, 29366, 29370]; // Replace these IDs with your actual media IDs.
$mediaIds = [29597, 29598]; // Replace these IDs with your actual media IDs.




// Load the media items.
$mediaItems = $entityTypeManager->getStorage('media')->loadMultiple($mediaIds);

// Now you can loop through the loaded media items and access their properties.
$file_ids = [];
foreach ($mediaItems as $media) {
   $file_ids[] = getNodeFieldValue($media, 'field_media_image');
}


if ($current_route_match) {
  $taxonomy_term = $current_route_match->getParameter('taxonomy_term');
  if ($taxonomy_term && $taxonomy_term->hasField('field_image')) {
    $image_illustrationId = getNodeFieldValue($taxonomy_term, 'field_image');
    //Si le champ image illustration est rempli on l'affiche 
    if ($image_illustrationId) {
      $mediaImg = Media::load($image_illustrationId);
      if ($mediaImg) {

        $media_field_img = getNodeFieldValue($mediaImg, 'field_media_image');
        $image_illustration = Drupal\file\Entity\File::load($media_field_img);
        $fileUrl = $image_illustration->createFileUrl();
        $variables['page']['random_img_header_last_document'] = $fileUrl;
      }
    }else {//sinon on affiche une image aléatoirement
      
      // Load the files.
      $files = Drupal\file\Entity\File::loadMultiple($file_ids);

      $file_urls = [];
     
      foreach ($files as $file) {
        // Get the URL of the file.
        $fileUrl = $file->createFileUrl();
        $file_urls[] = $fileUrl;
       
      }

      // Get a random key from the array
      $randomKey = array_rand($file_urls);
      // Get the random element using the random key
      



      //ajout condition si c'est le site pub on met l'image par defaut ici 
      $base_url = \Drupal::request()->getSchemeAndHttpHost();
      $is_site_public = strpos($base_url, 'cultureviande.dev.makoa.net') ||  strpos($base_url, 'cultureviande.makoa4.makoa.net');//Vérifier avec le domaine du site si c'est le site public
      
      $variables['page']['random_img_header_last_document'] = $file_urls[$randomKey];
      if ($is_site_public) {
        $variables['page']['random_img_header_last_document'] = DEFAULT_ILLUSTRATION_IMG_SITE_PUB;
        $variables['page']['there_is_no_image_linked'] = 'there-is-no-image-linked';
      }
    }
  }
}



// Get the current route.

//Image d'illustration d'une rubrique
customizeIllustrationImage($variables);


  
  $variables['public-site'] = 'https://www.cultureviande.eu/';
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set default values for these
    // variables.
    $variables['is_front'] = FALSE;
  }

  // If we're on the front page.
  if (!$variables['is_front']) {
    // Add unique classes for each page and website section.
    $path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path_alias.manager')->getAliasByPath($path);
    $alias = trim($alias, '/');
    if (!empty($alias)) {
      $name = str_replace('/', '-', $alias);
      $variables['attributes']['class'][] = 'page-' . $name;
      list($section,) = explode('/', $alias, 2);
      if (!empty($section)) {
        $variables['attributes']['class'][] = 'section-' . $section;
      }
    }
  }

  $current_path = \Drupal::service('path.current')->getPath();

  $request = \Drupal::request();

  // Get the path of the current request.
  $current_path = $request->getPathInfo();
  // Check if the path contains "/civicrm-group/".
  if (strpos($current_path, '/civicrm-event') === false) {

    // Add cachability metadata.
    $theme_name = \Drupal::theme()->getActiveTheme()->getName();
    $theme_settings = \Drupal::config($theme_name . '.settings');
    CacheableMetadata::createFromRenderArray($variables)
    ->addCacheableDependency($theme_settings)
    ->applyTo($variables);
    // Union all theme setting variables to the html.html.twig template.
    $variables += $theme_settings->getOriginal();
    // pour voir le resultat d'une fonction en mode debug/test
    // renvoie_le_resultat_de_ma_function();
  }
}

// COLLER ICI les namespaces nécessaires à ma fonction à tester
use Drupal\user\Entity\User;

function renvoie_le_resultat_de_ma_function(array $ids = NULL) {

  // COLLER CI DESSOUS LA FONCTION EN AJOUTANT kint{$mavariableresultat}; à la fin

  //This code will be return user list of a role

  $ids = \Drupal::entityQuery('user')
    ->condition('status', 1)
    //  ->condition('roles', 'animateur')
    ->condition('mail', 'usha@matisson.com') // pour TESTS
    ->execute();
  $users = User::loadMultiple($ids);
  foreach ($users as $user) {
    $username = $user->get('name')->getString();
    $mail =  $user->get('mail')->getString();
    $userlist[$mail] = $username;
  }

  kint($userlist);

  // COLLER - FIN
  // n'oublie pas kint{$mavariableresultat};
}

/**
 * Personnalise l'image d'illustration d'une rubrique
 */
function customizeIllustrationImage (&$variables) {
  $route_match = \Drupal::service('current_route_match');

  // Get the route name.
  $route_name = $route_match->getRouteName();
  // Check if the current route matches a taxonomy term page.
  if ($route_name === 'entity.taxonomy_term.canonical') {
    // Get the term ID from the route parameters.
    $term = $route_match->getParameter('taxonomy_term');
    if ($term && $term->hasField('field_image')) {
      $img = getNodeFieldValue($term, 'field_image');
      $img_object = Media::load($img);
      if ($img_object) {
        $img_file_id = getNodeFieldValue($img_object, 'field_media_image');
        $file_object = File::load($img_file_id);
        if ($file_object) {
          $uri = getNodeFieldValue($file_object, 'uri');
          $variables['page']['illustration_img'] = $uri;
        }
      }else {
        $variables['page']['illustration_img'] = DEFAULT_ILLUSTRATION_IMG;
      }
    }
  }
}

/**
 * Implements hook_theme().
 *
 * Declarer le theme 'pushmail' pour envoyer des mails avec
 * POUR LE PUSHMAIL
 * module makoad8pushmail dans platform/civicrmd8/modules/custom-makoa/
 *
 */

function b_zf_theme($existing, $type, $theme, $path) {

  if ($type == 'module') {
    return [
      'pushmail' => [
        'template' => 'mail',
        'variables' => [
          'message' => array(),
        ],
      ],
    ];
  }

}

/**
 * Implements hook_preprocess_HOOK() for variables.
 */
function b_zf_preprocess(&$variables, $hook) {
  // Ajoutez la variable is_authenticated à toutes les variables.

  /** Si l'utilisateur est seulement 'un user authentifié sans role' ou 'adherent sans communication' on n'affiche pas la recherche */
  $variables['site_pub_domain'] = SITE_PUBLIC_DOMAIN;
  $NotOnlyAuhtentificatedOrAdherentSansCommunicationOnly = false;
  
  $current_user = \Drupal::currentUser();
  $user = \Drupal\user\Entity\User::load($current_user->id());
  // Get an array of role IDs for the current user.
  
  $userRole = $current_user->getRoles();
  /** Si l'utilisateur n'a aucun rôle ou adherent sans communication on n'affiche pas le menu */
  if (in_array('administrator', $userRole ) || in_array('admin_client', $userRole ) || in_array('super_utilisateur', $userRole ) || in_array('permanent', $userRole )
  || in_array('permanent_lecture', $userRole ) || in_array('adherent', $userRole )|| in_array('social', $userRole )
  ) {
    $NotOnlyAuhtentificatedOrAdherentSansCommunicationOnly = true;
  }
  $variables['authorize_to_see_search'] = $NotOnlyAuhtentificatedOrAdherentSansCommunicationOnly;

  $variables['is_authenticated'] = \Drupal::currentUser()->isAuthenticated();
  // Get the base URL of the Drupal site including the protocol.
  $base_url = \Drupal::request()->getSchemeAndHttpHost();


  $is_site_metier = strpos($base_url, 'metiers-viande.');
  $is_site_extranet = strpos($base_url, 'phenix.cultureviande') ? 'site-extranet-cv' : '';
  $is_site_metier = $is_site_metier ? true : false;
  $variables['site_metier'] = $is_site_metier;
  $variables['is_site_extranet'] = $is_site_extranet;

  // $is_site_metier = strpos($base_url, 'metiers-viande.');//Vérifier avec le domaine du site si c'est le site metier
  $is_site_public = strpos($base_url, 'cultureviande.dev.makoa.net') ||  strpos($base_url, 'cultureviande.makoa4.makoa.net');//Vérifier avec le domaine du site si c'est le site public
  // $is_site_metier = $is_site_metier ? true : false;
  // $variables['site_metier'] = $is_site_metier;
  $variables['site_public'] = $is_site_public;
  $config_form = \Drupal::config('phenix_cv_public.address_footer.settings');
  $twitter_link = $config_form->get('cv_twitter');
  $footer_mail = $config_form->get('mail');
  $footer_tel = $config_form->get('tel');
  $footer_address = $config_form->get('address');
  $footer_description_definition = $config_form->get('description_definition');
  $footer_cv_linkedin = $config_form->get('cv_linkedin');
  $variables['twitter_link'] = $twitter_link;
  $variables['footer_mail'] = ['#markup' => $footer_mail['value']];
  $clean_string = strip_tags( $footer_mail['value']);
  $variables['footer_mail_to'] = $clean_string;
  $variables['footer_tel'] = $footer_tel;
  $variables['footer_address'] = ['#markup' => $footer_address['value']];
  $variables['footer_description_definition'] = ['#markup' => $footer_description_definition['value']];
  $variables['footer_cv_linkedin'] = $footer_cv_linkedin;
  
  if ($is_site_public) {
    $variables['class_body_site_pub'] = 'cv-body-site-pub';
    

    $variables['cv_class_site_pub'] = 'cv-body-site-pub';
    $variables['detail_taxonomy_cb_pub'] = 'detail-taxonomy-cb-pub';
    
    $route_match = \Drupal::routeMatch();
    
    // Check if the current route has a term parameter.
    if ($term = $route_match->getParameter('taxonomy_term')) {
      if ($term instanceof Term) {
        // Get the term ID and pass it to the Twig template.
        $variables['current_term_id'] = $term->id();
        $termObj = Term::load($term->id());
        $description = getNodeFieldValue($termObj, 'description');
        $variables['cv_pub_description'] = $description;
        $domain_access = getNodeFieldValue($termObj, 'field_domain_acces');
        if (!$domain_access || !in_array('cultureviande_dev_makoa_net', $domain_access) || !in_array('cultureviande_makoa4_makoa_net', $domain_access)) {
          $variables['not_site_pub'] = false;
        }else {
          $variables['not_site_pub'] = true;
        }
      }
    }
  }
  if ($is_site_public) {
    $variables['footer_lien_extranet'] = 'https://phenix.cultureviande.fr';
    $variables['footer_lien_metier'] = 'https://metiers-viande.com/accueil-metier';
  }


  $current_path = \Drupal::service('path.current')->getPath();
  $node_path = \Drupal::service('path_alias.manager')->getPathByAlias($current_path);
  $homepage = false;
  
  
  $_raw_variables = \Drupal::request()->attributes->get('_raw_variables');
  if ($_raw_variables) {

    $node = $_raw_variables->get('node');
    if ($node) {
      if ($node == '41250' || $node == '41248') {//todo mise en prod
        $variables['is_home_page_metier'] = true;
        $homepage = true;
        $variables['is_home_page'] = $homepage;
      }
    }
  }
  $variables['site_metier_custom_class'] = $is_site_metier ? "custom-class-site-metier ttes menu-sidebar-open " : '';
  $variables['site_metier_menu_open'] = $is_site_metier ? ' menu-sidebar-open ' : '';
  $variables['site_metier_hero'] = $is_site_metier ? ' metier-div-hero ' : '';
  $variables['site_metier_grid_container'] = $is_site_metier ? ' metier-div-grid-container ' : '';
  $variables['site_metier_header'] = $is_site_metier ? ' site-metier-header ' : '';
  $variables['site_metier_footer'] = $is_site_metier ? ' site-metier-footer ' : '';
  
  if ($is_site_extranet) {
    if (!$current_user->isAuthenticated()) {
    // The user is logged in.
      $variables['extranet_user_anonymous'] = 'extranet-user-anonymous';
    }
  }

  // Check if the current page is a taxonomy term page.
  if (\Drupal::routeMatch()->getRouteName() == 'entity.taxonomy_term.canonical') {
    // Get the current term ID.
    $term_id = \Drupal::routeMatch()->getParameter('taxonomy_term')->id();
    // Load the term entity.
    $term = \Drupal\taxonomy\Entity\Term::load($term_id);
    // Get the parent term ID.
    $parent_term_id = $term->parent->target_id;
    //TODO pour la mise en prod mettre le bon id parent  // peut etre créer une constante pour amélioration
    // dump($parent_term_id);
    if ($parent_term_id == 6328 || $parent_term_id == 6329 || $parent_term_id == 6332) {//todo mettre le bon id pour la mise en prod
      $variables['this_is_metier_detail_page'] = 'this-is-metier-detail-page';
      $variables['metier_detail_page'] = 'metier-detail-page';
      $variables['grid_container_metier_detail'] = $is_site_metier ? ' grid-container-metier-detail ' : '';
    }
  }

  //Vérifier si l'url du site 
  $path = \Drupal::request()->getpathInfo();
  $is_formulaire_donnee_eco = (strpos($path, '/civicrm/bulletin-de-cotisation-infomration') !== false)  || (strpos($path, 'civicrm/donnees-economique-entreprise-effectif-annuel') !== false);
  $is_formulaire_donnee_eco = $is_formulaire_donnee_eco ? true : false;
  $variables['is_formulaire_donnee_eco'] = $is_formulaire_donnee_eco;
}



/**
* Implements hook_preprocess_HOOK().
*/
use Drupal\Core\Url;

function b_zf_preprocess_page__civicrm_group(&$variables) {

  $path = \Drupal::request()->getpathInfo();
  $arg  = explode('/', $path);
  $groupId = $arg[2];
  //kint($groupId);

  $group = \Civi\Api4\Group::get(FALSE)
  ->addSelect('id', 'title', 'frontend_title')
  ->addWhere('id', '=', $groupId)
  ->execute()
  ->first();
  $groupName = $group['title'];
  //kint($groupName);

  $database = \Drupal::database();

  // Cc : Animateur suppléant 3 et membres suppléant 5
  $sqlCc = $database->query("select  email from civicrm_group_contact as gc
  left join civicrm_group_contact__field_role_dans_le_groupe as r on r.entity_id = gc.id and gc.status = 'Added' 
  left join civicrm_email as e on e.contact_id = gc.contact_id and e.is_primary = 1 
  where field_role_dans_le_groupe_value IN (3, 5) and group_id =" . $groupId );
  $list_userCc = '';

  if ($sqlCc) {
    while ($row = $sqlCc->fetchAssoc()) {
      $list_userCc = $list_userCc . ';' . $row['email'];
    }
  }
  $list_userCc = substr($list_userCc, 1);
  //kint($list_userCc);

  // To : Animateur 2 et membres titulaires 4 et permanents 1
 /*  $sqlTo = $database->query("SELECT email
            FROM civicrm_group_contact__field_role_dans_le_groupe as gcr
            INNER JOIN civicrm_group_contact as gc ON gc.id = gcr.entity_id AND gc.status = 'Added'
            INNER JOIN civicrm_email as email on email.contact_id = gc.contact_id AND is_primary = 1
            WHERE field_role_dans_le_groupe_value IN (1,2,4)
            AND group_id = " . $groupId); */
  $sqlTo = $database->query("select  email from civicrm_group_contact as gc
   left join civicrm_group_contact__field_role_dans_le_groupe as r on r.entity_id = gc.id and gc.status = 'Added' 
   left join civicrm_email as e on e.contact_id = gc.contact_id and e.is_primary = 1 
   where field_role_dans_le_groupe_value IN (1,2,4) and group_id = " . $groupId);
  //  $resultTo = $sqlTo->fetchAll();
   $list_userTo = '';
  if ($sqlTo) {
    $rows = array_column($sqlTo->fetchAll(), 'email');
    foreach ($rows as $row) {
      $list_userTo .=  $row . ';';
    }

    /* while ($row = $sqlTo->fetchAll()) {
    } */
  }


  //'cc', $list_userCc

  $domain = \Civi\Api4\Domain::get(FALSE)
    ->setCurrentDomain(TRUE)
    ->setCheckPermissions(FALSE)
    ->addSelect('name')
    ->execute()
    ->first();

  $body =  "Lien vers votre espace adhérents en ligne : " . \Drupal::request()->getSchemeAndHttpHost() . Url::fromRoute('<current>')->toString();
  //$body = \Drupal::request()->getSchemeAndHttpHost() . '/civicrm-group/' . $groupId;
  $mailto = 'mailto:' . $list_userTo . '?subject=' . urlencode($domain['name'] . ' - ' . $groupName) . '&body=' . urlencode($body) . '&cc=' . $list_userCc;

  //TODO: masquer pour les non animateurs du groupe Phenix Permissions IsAnimateurduGroupe ?
  $variables['mailto_contacts'] = \Drupal\Core\Link::fromTextAndUrl(t('Envoyer un email au groupe (via outlook)'), Url::fromUri($mailto));
  // $variables['mailto_contacts'] = \Drupal\Core\Link::fromTextAndUrl(t('courrier@cultureviande.fr'), Url::fromUri($mailto));

}

/**
 * Prepares variables for the field.html.twig template.
 */
function b_zf_preprocess_field(&$variables, $hook) {
  // Make additional variables available to the template.
  $variables['bundle'] = $variables['element']['#bundle'];
}

/**
 * Implements hook_preprocess_block().
 */
function b_zf_preprocess_block(&$variables) {
  $variables['custom_variable'] = 'qmsdlkj';
  $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
  if ($variables['content']['#bundle'] == 'civicrm_group' && $variables['plugin_id'] == 'field_block:civicrm_group:civicrm_group:title') {
    $current_group_id = \Drupal::request()->get('civicrm_group')->get('id')->getValue()[0]['value'];
    $btn_add_meet = '<a class="btn-add-meeting" href="/civicrm-event/add?group_id=' . $current_group_id . '"><i class="fa fa-plus-circle"></i>Ajouter une réunion</a>';
    if (isAdherent()) {
      $btn_add_meet = '';
    }
    
      $variables['content'][0]['#context']['value'] = Drupal\Core\Render\Markup::create('<div class="meeting-head"><span class="meetings"><i class="icon-custom-calendar"></i>Réunions</span> ' . $btn_add_meet . '');
      $variables['attributes']['class'][] = 'bloc-head-meetings-in-theme '. json_encode(\Drupal::currentUser()->getRoles());
  }
}

function isAdherent () {
  $current_user = \Drupal::currentUser();
  $user_roles = $current_user->getRoles();
  $isAdherent = true;
  if (in_array('super_utilisateur', $user_roles) || in_array('permanent', $user_roles) || in_array('administrator', $user_roles)) {
    $isAdherent = false;
  }
  return $isAdherent;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function b_zf_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(array('block-', '-'), array('', '_'), $variables['attributes']['block']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}


function b_zf_preprocess_views_view(&$variables) {
  // Add your custom variable here.
  $view = $variables['view'];
  $group_id = $view->args[0];
  if ($view->id() == 'civi_groupe_evenements' && $view->current_display == 'page_2') {
    $group_name = \Civi\Api4\Group::get(FALSE)
    ->addSelect('title')
    ->addWhere('id', '=', $group_id)
    ->execute()->first()['title'];
    $variables['custom_variable'] = ['#markup' => '<div class="custom-head"><p class="all-meet-group-name">
    Commission ' . $group_name . '</p>
    <p class="all-meet">Toutes les réunions passées :</p>
    </div>'];
  }
}
/*  
function b_zf_preprocess_taxonomy_term(&$variables) {
  // Add your preprocessing logic here.
  // Example: Add a custom variable to the term rendering.
  $variables['elements']['#attributes']['class'][] = 'This is a kkkk custom variable for the term';
}  */

<?php

/**
 * @file
 * Preprocess functions for basic smv.
 */

use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\Core\Cache\CacheableMetadata;


/* function getNodeFieldValue ($node, $field) {
  $value = '';
  $getValue = $node->get($field)->getValue();
  if (!empty($getValue)) {
    if (isset($getValue[0]['target_id'])) { //For entity reference (img / taxonomy ...)
      $value = $getValue[0]['target_id'];
    }elseif (isset($getValue[0]['value']))  { //For simple text / date
      $value = $getValue[0]['value'];
    }else if(isset($getValue[0]['uri'])) {
      $value = $getValue[0]['uri'];
    }else { //other type of field

    }
  }
  return $value;
} */

/**
 * Prepares variables for the html.html.twig template.
 */
function b_zf_preprocess_html(&$variables) {


// Load the entity type manager service.
$entityTypeManager = \Drupal::entityTypeManager();

// Define the array of media IDs you want to load.
$mediaIds = [29369, 29368, 29367, 29366, 29370]; // Replace these IDs with your actual media IDs.

// Load the media items.
$mediaItems = $entityTypeManager->getStorage('media')->loadMultiple($mediaIds);

// Now you can loop through the loaded media items and access their properties.
$file_ids = [];
foreach ($mediaItems as $media) {
   $file_ids[] = getNodeFieldValue($media, 'field_media_image');
  //  dump($media_file);
}


// Load the files.
$files = Drupal\file\Entity\File::loadMultiple($file_ids);

$file_urls = [];
foreach ($files as $file) {
  // Get the URL of the file.
  $fileUrl = $file->createFileUrl();
  $file_urls[] = $fileUrl;
}

// Get a random key from the array
$randomKey = array_rand($file_urls);

// Get the random element using the random key
$variables['page']['random_img_header_last_document'] = $file_urls[$randomKey];

// dump($variables);


  
  $variables['public-site'] = 'https://www.cultureviande.eu/';
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set default values for these
    // variables.
    $variables['is_front'] = FALSE;
  }

  // If we're on the front page.
  if (!$variables['is_front']) {
    // Add unique classes for each page and website section.
    $path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path_alias.manager')->getAliasByPath($path);
    $alias = trim($alias, '/');
    if (!empty($alias)) {
      $name = str_replace('/', '-', $alias);
      $variables['attributes']['class'][] = 'page-' . $name;
      list($section,) = explode('/', $alias, 2);
      if (!empty($section)) {
        $variables['attributes']['class'][] = 'section-' . $section;
      }
    }
  }

  // Add cachability metadata.
  $theme_name = \Drupal::theme()->getActiveTheme()->getName();
  $theme_settings = \Drupal::config($theme_name . '.settings');
  CacheableMetadata::createFromRenderArray($variables)
    ->addCacheableDependency($theme_settings)
    ->applyTo($variables);
  // Union all theme setting variables to the html.html.twig template.
  $variables += $theme_settings->getOriginal();
  // pour voir le resultat d'une fonction en mode debug/test
  // renvoie_le_resultat_de_ma_function();
}

// COLLER ICI les namespaces nécessaires à ma fonction à tester
use Drupal\user\Entity\User;

function renvoie_le_resultat_de_ma_function(array $ids = NULL) {

  // COLLER CI DESSOUS LA FONCTION EN AJOUTANT kint{$mavariableresultat}; à la fin

  //This code will be return user list of a role

  $ids = \Drupal::entityQuery('user')
    ->condition('status', 1)
    //  ->condition('roles', 'animateur')
    ->condition('mail', 'usha@matisson.com') // pour TESTS
    ->execute();
  $users = User::loadMultiple($ids);
  foreach ($users as $user) {
    $username = $user->get('name')->getString();
    $mail =  $user->get('mail')->getString();
    $userlist[$mail] = $username;
  }

  kint($userlist);

  // COLLER - FIN
  // n'oublie pas kint{$mavariableresultat};
}

/**
 * Implements hook_theme().
 *
 * Declarer le theme 'pushmail' pour envoyer des mails avec
 * POUR LE PUSHMAIL
 * module makoad8pushmail dans platform/civicrmd8/modules/custom-makoa/
 *
 */

function b_zf_theme($existing, $type, $theme, $path) {

  if ($type == 'module') {
    return [
      'pushmail' => [
        'template' => 'mail',
        'variables' => [
          'message' => array(),
        ],
      ],
    ];
  }

}


/**
* Implements hook_preprocess_HOOK().
*/
use Drupal\Core\Url;

function b_zf_preprocess_page__civicrm_group(&$variables) {

  $path = \Drupal::request()->getpathInfo();
  $arg  = explode('/', $path);
  $groupId = $arg[2];
  //kint($groupId);

  $group = \Civi\Api4\Group::get(FALSE)
  ->addSelect('id', 'title', 'frontend_title')
  ->addWhere('id', '=', $groupId)
  ->execute()
  ->first();
  $groupName = $group['title'];
  //kint($groupName);

  $database = \Drupal::database();

  // Cc : Animateur suppléant 3 et membres suppléant 5
  $sqlCc = $database->query("select  email from civicrm_group_contact as gc
  left join civicrm_group_contact__field_role_dans_le_groupe as r on r.entity_id = gc.id and gc.status = 'Added' 
  left join civicrm_email as e on e.contact_id = gc.contact_id and e.is_primary = 1 
  where field_role_dans_le_groupe_value IN (3, 5) and group_id =" . $groupId );
  $list_userCc = '';

  if ($sqlCc) {
    while ($row = $sqlCc->fetchAssoc()) {
      $list_userCc = $list_userCc . ';' . $row['email'];
    }
  }
  $list_userCc = substr($list_userCc, 1);
  //kint($list_userCc);

  // To : Animateur 2 et membres titulaires 4 et permanents 1
 /*  $sqlTo = $database->query("SELECT email
            FROM civicrm_group_contact__field_role_dans_le_groupe as gcr
            INNER JOIN civicrm_group_contact as gc ON gc.id = gcr.entity_id AND gc.status = 'Added'
            INNER JOIN civicrm_email as email on email.contact_id = gc.contact_id AND is_primary = 1
            WHERE field_role_dans_le_groupe_value IN (1,2,4)
            AND group_id = " . $groupId); */
  $sqlTo = $database->query("select  email from civicrm_group_contact as gc
   left join civicrm_group_contact__field_role_dans_le_groupe as r on r.entity_id = gc.id and gc.status = 'Added' 
   left join civicrm_email as e on e.contact_id = gc.contact_id and e.is_primary = 1 
   where field_role_dans_le_groupe_value IN (1,2,4) and group_id = " . $groupId);
  //  $resultTo = $sqlTo->fetchAll();
   $list_userTo = '';
  if ($sqlTo) {
    $rows = array_column($sqlTo->fetchAll(), 'email');
    foreach ($rows as $row) {
      $list_userTo .=  $row . ';';
    }

    /* while ($row = $sqlTo->fetchAll()) {
    } */
  }


// dump($list_userTo, $list_userCc);
  //'cc', $list_userCc

  $domain = \Civi\Api4\Domain::get(FALSE)
    ->setCurrentDomain(TRUE)
    ->setCheckPermissions(FALSE)
    ->addSelect('name')
    ->execute()
    ->first();

  $body =  "Lien vers votre espace adhérents en ligne : " . \Drupal::request()->getSchemeAndHttpHost() . Url::fromRoute('<current>')->toString();
  //$body = \Drupal::request()->getSchemeAndHttpHost() . '/civicrm-group/' . $groupId;
  $mailto = 'mailto:' . $list_userTo . '?subject=' . urlencode($domain['name'] . ' - ' . $groupName) . '&body=' . urlencode($body) . '&cc=' . $list_userCc;

  //TODO: masquer pour les non animateurs du groupe Phenix Permissions IsAnimateurduGroupe ?
  $variables['mailto_contacts'] = \Drupal\Core\Link::fromTextAndUrl(t('Envoyer un email au groupe (via outlook)'), Url::fromUri($mailto));
  // $variables['mailto_contacts'] = \Drupal\Core\Link::fromTextAndUrl(t('courrier@cultureviande.fr'), Url::fromUri($mailto));

}

/**
 * Prepares variables for the field.html.twig template.
 */
function b_zf_preprocess_field(&$variables, $hook) {
  // Make additional variables available to the template.
  $variables['bundle'] = $variables['element']['#bundle'];
}

/**
 * Implements hook_preprocess_block().
 */
function b_zf_preprocess_block(&$variables) {
  $variables['content']['#attributes']['block'] = $variables['attributes']['id'];
  // dump($variables);
  if ($variables['content']['#bundle'] == 'civicrm_group' && $variables['plugin_id'] == 'field_block:civicrm_group:civicrm_group:title') {
    $variables['content'][0]['#context']['value'] = Drupal\Core\Render\Markup::create('<div class="meeting-head"><span class="meetings"><i class="icon-custom-calendar"></i>Réunions</span><a class="btn-add-meeting" href="/civicrm-event/add"><i class="fa fa-plus-circle"></i>Ajouter une réunion</a>');

  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function b_zf_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Remove the block and replace dashes with underscores in the block ID to
  // use for the hook name.
  if (isset($variables['attributes']['block'])) {
    $hook = str_replace(array('block-', '-'), array('', '_'), $variables['attributes']['block']);
    $suggestions[] = $variables['theme_hook_original'] . '__' . $hook;
  }
}
